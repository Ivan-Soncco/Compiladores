Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AMPERSAND
    AND
    ARROW
    ASSIGN
    ASTERISK
    BOOL
    BREAK
    CASE
    CHAR
    CHAR_LITERAL
    CIN
    CLASS
    COLON
    COLON_COLON
    COMMA
    CONST
    CONTINUE
    COUT
    DEC
    DO
    DOT
    DOUBLE
    ELSE
    ENDL
    EQ
    FLOAT
    FOR
    GE
    GT
    HASH
    ID
    IF
    INC
    INCLUDE
    INT
    LANGLE
    LBRACE
    LBRACKET
    LE
    LSHIFT
    LT
    MAIN
    MODULO
    NAMESPACE
    NE
    NOT
    OR
    QUESTION
    RANGLE
    RBRACE
    RBRACKET
    RETURN
    RSHIFT
    SEMICOLON
    STATIC
    STD
    STRING_LITERAL
    STRUCT
    SWITCH
    TYPEDEF
    USING
    VOID
    WHILE

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expression PLUS expression
Rule 2     expression -> expression MINUS expression
Rule 3     expression -> expression TIMES expression
Rule 4     expression -> expression DIVIDE expression
Rule 5     expression -> LPAREN expression RPAREN
Rule 6     expression -> NUMBER

Terminals, with rules where they appear

AMPERSAND            : 
AND                  : 
ARROW                : 
ASSIGN               : 
ASTERISK             : 
BOOL                 : 
BREAK                : 
CASE                 : 
CHAR                 : 
CHAR_LITERAL         : 
CIN                  : 
CLASS                : 
COLON                : 
COLON_COLON          : 
COMMA                : 
CONST                : 
CONTINUE             : 
COUT                 : 
DEC                  : 
DIVIDE               : 4
DO                   : 
DOT                  : 
DOUBLE               : 
ELSE                 : 
ENDL                 : 
EQ                   : 
FLOAT                : 
FOR                  : 
GE                   : 
GT                   : 
HASH                 : 
ID                   : 
IF                   : 
INC                  : 
INCLUDE              : 
INT                  : 
LANGLE               : 
LBRACE               : 
LBRACKET             : 
LE                   : 
LPAREN               : 5
LSHIFT               : 
LT                   : 
MAIN                 : 
MINUS                : 2
MODULO               : 
NAMESPACE            : 
NE                   : 
NOT                  : 
NUMBER               : 6
OR                   : 
PLUS                 : 1
QUESTION             : 
RANGLE               : 
RBRACE               : 
RBRACKET             : 
RETURN               : 
RPAREN               : 5
RSHIFT               : 
SEMICOLON            : 
STATIC               : 
STD                  : 
STRING_LITERAL       : 
STRUCT               : 
SWITCH               : 
TIMES                : 3
TYPEDEF              : 
USING                : 
VOID                 : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

expression           : 1 1 2 2 3 3 4 4 5 0

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . NUMBER

    LPAREN          shift and go to state 2
    NUMBER          shift and go to state 3

    expression                     shift and go to state 1

state 1

    (0) S' -> expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression

    PLUS            shift and go to state 4
    MINUS           shift and go to state 5
    TIMES           shift and go to state 6
    DIVIDE          shift and go to state 7


state 2

    (5) expression -> LPAREN . expression RPAREN
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . NUMBER

    LPAREN          shift and go to state 2
    NUMBER          shift and go to state 3

    expression                     shift and go to state 8

state 3

    (6) expression -> NUMBER .

    PLUS            reduce using rule 6 (expression -> NUMBER .)
    MINUS           reduce using rule 6 (expression -> NUMBER .)
    TIMES           reduce using rule 6 (expression -> NUMBER .)
    DIVIDE          reduce using rule 6 (expression -> NUMBER .)
    $end            reduce using rule 6 (expression -> NUMBER .)
    RPAREN          reduce using rule 6 (expression -> NUMBER .)


state 4

    (1) expression -> expression PLUS . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . NUMBER

    LPAREN          shift and go to state 2
    NUMBER          shift and go to state 3

    expression                     shift and go to state 9

state 5

    (2) expression -> expression MINUS . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . NUMBER

    LPAREN          shift and go to state 2
    NUMBER          shift and go to state 3

    expression                     shift and go to state 10

state 6

    (3) expression -> expression TIMES . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . NUMBER

    LPAREN          shift and go to state 2
    NUMBER          shift and go to state 3

    expression                     shift and go to state 11

state 7

    (4) expression -> expression DIVIDE . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . LPAREN expression RPAREN
    (6) expression -> . NUMBER

    LPAREN          shift and go to state 2
    NUMBER          shift and go to state 3

    expression                     shift and go to state 12

state 8

    (5) expression -> LPAREN expression . RPAREN
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 13
    PLUS            shift and go to state 4
    MINUS           shift and go to state 5
    TIMES           shift and go to state 6
    DIVIDE          shift and go to state 7


state 9

    (1) expression -> expression PLUS expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 1 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 1 (expression -> expression PLUS expression .)
    $end            reduce using rule 1 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 1 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 6
    DIVIDE          shift and go to state 7

  ! TIMES           [ reduce using rule 1 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 1 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 4 ]
  ! MINUS           [ shift and go to state 5 ]


state 10

    (2) expression -> expression MINUS expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 2 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 2 (expression -> expression MINUS expression .)
    $end            reduce using rule 2 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 2 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 6
    DIVIDE          shift and go to state 7

  ! TIMES           [ reduce using rule 2 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 2 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 4 ]
  ! MINUS           [ shift and go to state 5 ]


state 11

    (3) expression -> expression TIMES expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 3 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 3 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 3 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 3 (expression -> expression TIMES expression .)
    $end            reduce using rule 3 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 3 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 4 ]
  ! MINUS           [ shift and go to state 5 ]
  ! TIMES           [ shift and go to state 6 ]
  ! DIVIDE          [ shift and go to state 7 ]


state 12

    (4) expression -> expression DIVIDE expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 4 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 4 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 4 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 4 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 4 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 4 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 4 ]
  ! MINUS           [ shift and go to state 5 ]
  ! TIMES           [ shift and go to state 6 ]
  ! DIVIDE          [ shift and go to state 7 ]


state 13

    (5) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 5 (expression -> LPAREN expression RPAREN .)

